using System;
using System.Diagnostics;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using WF.EAI.Entities.domain.submitCreditAppRetailer;
using WF.EAI.Entities.interfaces.services.submitCreditAppRetailer;
using WF.EAI.Utils;
using System.Xml;
using AutoMapper;
using WF.UAP.UDB.Repository.Domain.Entities.AppSubmission;
using WellsFargoUFEDS = WF.UAP.UDB.Repository.Domain.Entities.AppSubmission.WellsFargoUFEDSType;
using System.Collections.Generic;

namespace WF.UAP.UA.UAA.UnitTest
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestMethod1()
        {
            int[] arr = { 3, 7, 5, 2, 11, 9, 16, 4 };

            //quickSort(arr, 0, len - 1);

            for (int i = 0; i < arr.Length - 1; i++)
            {
                int output = FindK(arr, i);
                Debug.WriteLine("Find " + i + "th " + output);
            }
        }

        static public int Partition(int[] numbers, int left, int right)
        {
            int pivot = numbers[left];
            while (true)
            {
                while (numbers[left] < pivot)
                    left++;
                while (numbers[right] > pivot)
                    right--;

                if (left < right)
                {
                    int temp = numbers[left];
                    numbers[left] = numbers[right];
                    numbers[right] = temp;
                }
                else
                {
                    return right;
                }
            }
        }

        static public int FindK(int[] numbers, int k)
        {
            int pos = Partition(numbers, 0, numbers.Length - 1);
            while (true)
            {
                if (pos > k)
                {
                    pos = Partition(numbers, 0, pos);
                }
                else if (pos < k)
                {
                    pos = Partition(numbers, pos + 1, numbers.Length - 1);
                }
                else if (pos == k)
                {
                    return numbers[pos];
                }
            }
           
        }

        static public void quickSort(int[] arr, int left, int right)
        {
            if (left < right)
            {
                int pivot = Partition(arr, left, right);
                Debug.WriteLine("pivot " + pivot);

                if (pivot > 1)
                {
                    quickSort(arr, left, pivot - 1);
                }

                if (pivot + 1 < right)
                {
                    quickSort(arr, pivot + 1, right);
                }

            }
        }
    }
}
